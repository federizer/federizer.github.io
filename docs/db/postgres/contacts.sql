/*
 Navicat Premium Data Transfer

 Source Server         : do-frankfurt-repo
 Source Server Type    : PostgreSQL
 Source Server Version : 100004
 Source Host           : 127.0.0.1:6432
 Source Catalog        : dps-repository
 Source Schema         : contacts

 Target Server Type    : PostgreSQL
 Target Server Version : 100004
 File Encoding         : 65001

 Date: 25/09/2018 11:03:31
*/


-- ----------------------------
-- Sequence structure for people_id_seq
-- ----------------------------
DROP SEQUENCE IF EXISTS "contacts"."people_id_seq";
CREATE SEQUENCE "contacts"."people_id_seq" 
INCREMENT 1
MINVALUE  1
MAXVALUE 9223372036854775807
START 1
CACHE 1;

-- ----------------------------
-- Table structure for people
-- ----------------------------
DROP TABLE IF EXISTS "contacts"."people";
CREATE TABLE "contacts"."people" (
  "id" int8 NOT NULL DEFAULT nextval('"contacts".people_id_seq'::regclass),
  "owner" varchar(255) COLLATE "pg_catalog"."default" NOT NULL,
  "given_name" varchar(255) COLLATE "pg_catalog"."default",
  "surname" varchar(255) COLLATE "pg_catalog"."default",
  "email_address" varchar(255) COLLATE "pg_catalog"."default" NOT NULL,
  "created_at" timestamptz(6) DEFAULT now(),
  "updated_at" timestamptz(6)
)
;
COMMENT ON COLUMN "contacts"."people"."id" IS 'The table primary key - autogenerated by sequence.';
COMMENT ON COLUMN "contacts"."people"."owner" IS 'Owner email address - should be taken from access token.';
COMMENT ON COLUMN "contacts"."people"."given_name" IS 'Person given name';
COMMENT ON COLUMN "contacts"."people"."surname" IS 'Person surname';
COMMENT ON COLUMN "contacts"."people"."email_address" IS 'Person email address';
COMMENT ON COLUMN "contacts"."people"."created_at" IS 'Record created timestamp - default now.';
COMMENT ON COLUMN "contacts"."people"."updated_at" IS 'Record updated timestamp - updated by trigger/function';

-- ----------------------------
-- Function structure for table_updated
-- ----------------------------
DROP FUNCTION IF EXISTS "contacts"."table_updated"();
CREATE OR REPLACE FUNCTION "contacts"."table_updated"()
  RETURNS "pg_catalog"."trigger" AS $BODY$ BEGIN NEW.updated_at = now(); RETURN NEW; END; $BODY$
  LANGUAGE plpgsql VOLATILE SECURITY DEFINER
  COST 100;

-- ----------------------------
-- Alter sequences owned by
-- ----------------------------
SELECT setval('"contacts"."people_id_seq"', 18, true);

-- ----------------------------
-- Triggers structure for table people
-- ----------------------------
CREATE TRIGGER "contacts_people_updated" BEFORE UPDATE ON "contacts"."people"
FOR EACH ROW
EXECUTE PROCEDURE "contacts"."table_updated"();

-- ----------------------------
-- Primary Key structure for table people
-- ----------------------------
ALTER TABLE "contacts"."people" ADD CONSTRAINT "people_pkey" PRIMARY KEY ("id");
